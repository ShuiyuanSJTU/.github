# Generated from https://github.com/discourse/.github/blob/0efb1ef3d0f5c1ad836edcfd617220e6fbfa8809/.github/workflows/discourse-plugin.yml
# Generator version: b39461d2f99668472731e4bd50f13abe5bd96f97

name: Plugin Compatibility

on:
  workflow_dispatch:

concurrency:
  group: discourse-plugin-${{ format('{0}-{1}-{2}', github.head_ref || github.run_number, github.job, inputs.core_ref) }}
  cancel-in-progress: true

env:
  JS_PKG_MANAGER_NULL_VALUE: "none"

defaults:
  run:
    shell: bash

jobs:
  check_for_tests:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      matrix: ${{ steps.check_tests.outputs.matrix }}
      has_specs: ${{ steps.check_tests.outputs.has_specs }}
      has_compatibility_file: ${{ steps.check_tests.outputs.has_compatibility_file }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          path: tmp

      - name: Setup Plugin Directory
        run: mkdir -p plugins

      - name: Clone plugins
        uses: discourse/.github/actions/clone-additional-plugins@b780a606cbe5c865c51016699a1831698e3126ee
        with:
          ssh_private_key: ${{ secrets.ssh_private_key || ''}}
          about_json_path: tmp/plugins.json

      - name: Check For Test Types
        id: check_tests
        shell: ruby {0}
        working-directory: plugins
        run: |2

          require 'json'

          matrix = []

          matrix << 'frontend' if Dir.glob("*/test/javascripts/**/*.{js,gjs}").any?
          matrix << 'backend'
          matrix << 'system' if Dir.glob("*/spec/system/**/*.rb").any?

          puts "Running jobs: #{matrix.inspect}"

          File.write(ENV["GITHUB_OUTPUT"], "has_specs=true\n", mode: 'a+') if Dir.glob("*/spec/**/*.rb").reject { _1.include?("spec/system") }.any?

          File.write(ENV["GITHUB_OUTPUT"], "matrix=#{matrix.to_json}\n", mode: 'a+')

  tests:
    name: ${{ matrix.build_type || '' }}_tests
    runs-on: ${{ inputs.runs_on }}
    container: ${{ inputs.container || format('discourse/discourse_test:slim{0}', (matrix.build_type == 'frontend' || matrix.build_type == 'system') && '-browsers' || '') }}
    timeout-minutes: 30
    needs: check_for_tests

    env:
      DISCOURSE_HOSTNAME: www.example.com
      RUBY_GLOBAL_METHOD_CACHE_SIZE: 131072
      RAILS_ENV: test
      PGUSER: discourse
      PGPASSWORD: discourse
      PLUGIN_NAME: '*'
      CHEAP_SOURCE_MAPS: "1"
      MINIO_RUNNER_LOG_LEVEL: DEBUG
      MINIO_RUNNER_INSTALL_DIR: /home/discourse/.minio_runner
      USES_PARALLEL_DATABASES: ${{ matrix.build_type == 'backend' || matrix.build_type == 'system' }}

    strategy:
      fail-fast: false

      matrix:
        build_type: ${{ fromJSON(needs.check_for_tests.outputs.matrix) }}

    steps:
      - name: Set working directory owner
        run: chown root:root .

      - uses: actions/checkout@v4
        with:
          repository: discourse/discourse
          fetch-depth: 1
          ref: ${{ inputs.core_ref }}

      - name: Setup Git
        run: |
          git config --global user.email "ci@ci.invalid"
          git config --global user.name "Discourse CI"

      - name: Start redis
        run: |
          redis-server /etc/redis/redis.conf &

      - name: Start Postgres
        run: |
          chown -R postgres /var/run/postgresql
          sudo -E -u postgres script/start_test_db.rb
          sudo -u postgres psql -c "CREATE ROLE $PGUSER LOGIN SUPERUSER PASSWORD '$PGPASSWORD';"

      - name: Container envs
        id: container-envs
        run: |
          echo "ruby_version=$RUBY_VERSION" >> $GITHUB_OUTPUT
          echo "debian_release=$DEBIAN_RELEASE" >> $GITHUB_OUTPUT

      - name: Bundler cache
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ steps.container-envs.outputs.ruby_version }}-${{ steps.container-envs.outputs.debian_release }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.container-envs.outputs.ruby_version }}-${{ steps.container-envs.outputs.debian_release }}-gem-

      - name: Setup gems
        run: |
          gem install bundler --conservative -v $(awk '/BUNDLED WITH/ { getline; gsub(/ /,""); print $0 }' Gemfile.lock)
          bundle config --local path vendor/bundle
          bundle config --local deployment true
          bundle config --local without development
          bundle install --jobs 4
          bundle clean

      - name: Checkout plugins list
        uses: actions/checkout@v4
        with:
          path: tmp

      - name: Clone plugins
        uses: discourse/.github/actions/clone-additional-plugins@v1
        with:
          ssh_private_key: ${{ secrets.ssh_private_key || ''}}
          about_json_path: tmp/plugins.json

      - name: Lint English locale
        if: matrix.build_type == 'backend'
        run: bundle exec ruby script/i18n_lint.rb "plugins/${{ env.PLUGIN_NAME }}/config/locales/{client,server}.en.yml"
        continue-on-error: true

      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: if [ -f yarn.lock ]; then echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT; fi

      - name: Yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        if: ${{ steps.yarn-cache-dir.outputs.dir }}
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install JS Dependencies
        run: if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else pnpm install --frozen-lockfile; fi

      - name: Set PARALLEL_TEST_PROCESSORS for system tests
        if: matrix.build_type == 'system'
        run: |
          echo "PARALLEL_TEST_PROCESSORS=$(($(nproc) / 2))" >> $GITHUB_ENV

      - name: Fetch app state cache
        uses: actions/cache@v4
        id: app-cache
        with:
          path: tmp/app-cache
          key: >-
            ${{ runner.os }}-
            ${{ hashFiles('.github/workflows/discourse-plugin.yml') }}-
            ${{ hashFiles('db/**/*', 'plugins/**/db/**/*') }}-
            ${{ env.USES_PARALLEL_DATABASES }}-
            ${{ env.PARALLEL_TEST_PROCESSORS }}-

      - name: Restore database from cache
        if: steps.app-cache.outputs.cache-hit == 'true'
        run: |
          if test -f script/silence_successful_output; then
            script/silence_successful_output psql -f tmp/app-cache/cache.sql postgres
          else
            psql -f tmp/app-cache/cache.sql postgres
          fi

      - name: Restore uploads from cache
        if: steps.app-cache.outputs.cache-hit == 'true'
        run: rm -rf public/uploads && cp -r tmp/app-cache/uploads public/uploads

      - name: Create and migrate database
        if: steps.app-cache.outputs.cache-hit != 'true'
        run: |
          bin/rake db:create
          if test -f script/silence_successful_output; then
            script/silence_successful_output bin/rake db:migrate
          else
            bin/rake db:migrate
          fi

      - name: Create and migrate parallel databases
        if: env.USES_PARALLEL_DATABASES == 'true' && steps.app-cache.outputs.cache-hit != 'true'
        run: |
          bin/rake parallel:create
          script/silence_successful_output bin/rake parallel:migrate

      - name: Dump database for cache
        if: steps.app-cache.outputs.cache-hit != 'true'
        run: mkdir -p tmp/app-cache && pg_dumpall > tmp/app-cache/cache.sql

      - name: Dump uploads for cache
        if: steps.app-cache.outputs.cache-hit != 'true'
        run: rm -rf tmp/app-cache/uploads && cp -r public/uploads tmp/app-cache/uploads

      - name: Check Zeitwerk eager_load
        if: matrix.build_type == 'backend'
        env:
          LOAD_PLUGINS: 1
        run: |
          if ! bin/rails zeitwerk:check --trace; then
            echo
            echo "---------------------------------------------"
            echo
            echo "::error::'bin/rails zeitwerk:check' failed - the app will fail to boot with 'eager_load=true' (e.g. in production)."
            echo "To reproduce locally, run 'bin/rails zeitwerk:check'."
            echo "Alternatively, you can run your local server/tests with the 'DISCOURSE_ZEITWERK_EAGER_LOAD=1' environment variable."
            echo
            exit 1
          fi

      - name: Check Zeitwerk reloading
        if: matrix.build_type == 'backend'
        env:
          LOAD_PLUGINS: 1
        run: |
          if ! bin/rails runner 'Rails.application.reloader.reload!'; then
            echo
            echo "---------------------------------------------"
            echo
            echo "::error::Zeitwerk reload failed - the app will not be able to reload properly in development."
            echo "To reproduce locally, run \`bin/rails runner 'Rails.application.reloader.reload!'\`."
            echo
            exit 1
          fi

      - name: Plugin RSpec
        if: matrix.build_type == 'backend' && needs.check_for_tests.outputs.has_specs
        env:
          LOAD_PLUGINS: 1
        run: bin/turbo_rspec --verbose --format documentation --exclude-pattern="*spec/system*" plugins/${{ env.PLUGIN_NAME }}/spec

      - name: Plugin QUnit
        if: matrix.build_type == 'frontend'
        run: QUNIT_EMBER_CLI=1 bundle exec rake plugin:qunit['${{ env.PLUGIN_NAME }}','1200000']
        timeout-minutes: 10

      - name: Ember Build for System Tests
        if: matrix.build_type == 'system'
        run: bin/ember-cli --build

      - name: Add hosts to /etc/hosts, otherwise Chrome cannot reach minio
        if: matrix.build_type == 'system'
        run: |
          echo "127.0.0.1 minio.local" | sudo tee -a /etc/hosts
          echo "127.0.0.1 discoursetest.minio.local" | sudo tee -a /etc/hosts

      - name: Minio cache
        if: matrix.build_type == 'system'
        uses: actions/cache@v4
        with:
          path: ${{ env.MINIO_RUNNER_INSTALL_DIR }}
          key: ${{ runner.os }}-${{ steps.container-envs.outputs.ruby_version }}-${{ steps.container-envs.outputs.debian_release }}

      - name: Ensure latest minio binary installed for Core System Tests
        if: matrix.build_type == 'system'
        run: bundle exec ruby script/install_minio_binaries.rb

      - name: Plugin System Tests
        if: matrix.build_type == 'system'
        env:
          LOAD_PLUGINS: 1
          CAPYBARA_DEFAULT_MAX_WAIT_TIME: 10
        run: bin/turbo_rspec --verbose --format documentation plugins/${{ env.PLUGIN_NAME }}/spec/system

      - name: Upload failed system test artifacts
        uses: actions/upload-artifact@v4
        if: matrix.build_type == 'system' && failure()
        with:
          name: failed-system-test-artifacts
          path: |
            tmp/capybara/*.png
            tmp/capybara/*.zip
            tmp/capybara/*.webm